import { Ionicons } from "@expo/vector-icons";
import { useRouter } from "expo-router";
import { useState } from "react";
import {
    Alert,
    ScrollView,
    Text,
    TouchableOpacity,
    View
} from "react-native";

const HivQuiz = () => {
  const router = useRouter();
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState({});
  const [showResult, setShowResult] = useState(false);
  const [quizStarted, setQuizStarted] = useState(false);

  const questions = [
    {
      id: 1,
      question: "HIV l√† vi·∫øt t·∫Øt c·ªßa t·ª´ g√¨?",
      options: [
        "Human Immunodeficiency Virus",
        "Human Infectious Disease Virus", 
        "Health Information Virus",
        "Human Immune Virus"
      ],
      correctAnswer: 0,
      explanation: "HIV l√† vi·∫øt t·∫Øt c·ªßa Human Immunodeficiency Virus - Virus g√¢y suy gi·∫£m mi·ªÖn d·ªãch ·ªü ng∆∞·ªùi."
    },
    {
      id: 2,
      question: "HIV c√≥ th·ªÉ l√¢y truy·ªÅn qua con ƒë∆∞·ªùng n√†o?",
      options: [
        "Ch·ªâ qua ƒë∆∞·ªùng t√¨nh d·ª•c",
        "Qua m√°u, t√¨nh d·ª•c v√† t·ª´ m·∫π sang con",
        "Qua kh√¥ng kh√≠ khi ho, h·∫Øt h∆°i",
        "Qua vi·ªác ƒÉn chung, u·ªëng chung"
      ],
      correctAnswer: 1,
      explanation: "HIV l√¢y truy·ªÅn qua 3 ƒë∆∞·ªùng ch√≠nh: ƒë∆∞·ªùng t√¨nh d·ª•c, ƒë∆∞·ªùng m√°u v√† t·ª´ m·∫π sang con. Kh√¥ng l√¢y qua kh√¥ng kh√≠ hay ti·∫øp x√∫c th∆∞·ªùng ng√†y."
    },
    {
      id: 3,
      question: "Th·ªùi gian ·ªß b·ªánh c·ªßa HIV l√† bao l√¢u?",
      options: [
        "2-4 tu·∫ßn",
        "2-10 nƒÉm ho·∫∑c l√¢u h∆°n",
        "6 th√°ng",
        "1 nƒÉm"
      ],
      correctAnswer: 1,
      explanation: "Th·ªùi gian ·ªß b·ªánh c·ªßa HIV c√≥ th·ªÉ k√©o d√†i t·ª´ 2-10 nƒÉm ho·∫∑c l√¢u h∆°n, t√πy thu·ªôc v√†o s·ª©c kh·ªèe v√† ƒëi·ªÅu tr·ªã c·ªßa t·ª´ng ng∆∞·ªùi."
    },
    {
      id: 4,
      question: "C√°ch ph√≤ng ng·ª´a HIV hi·ªáu qu·∫£ nh·∫•t l√† g√¨?",
      options: [
        "Ch·ªâ s·ª≠ d·ª•ng bao cao su",
        "Tr√°nh quan h·ªá t√¨nh d·ª•c ho√†n to√†n",
        "K·∫øt h·ª£p nhi·ªÅu bi·ªán ph√°p: bao cao su, x√©t nghi·ªám, PrEP",
        "Ch·ªâ c·∫ßn x√©t nghi·ªám ƒë·ªãnh k·ª≥"
      ],
      correctAnswer: 2,
      explanation: "Ph√≤ng ng·ª´a HIV hi·ªáu qu·∫£ nh·∫•t khi k·∫øt h·ª£p nhi·ªÅu bi·ªán ph√°p: s·ª≠ d·ª•ng bao cao su ƒë√∫ng c√°ch, x√©t nghi·ªám ƒë·ªãnh k·ª≥, PrEP, v√† gi√°o d·ª•c t√¨nh d·ª•c an to√†n."
    },
    {
      id: 5,
      question: "PrEP l√† g√¨?",
      options: [
        "Thu·ªëc ƒëi·ªÅu tr·ªã HIV",
        "Thu·ªëc d·ª± ph√≤ng tr∆∞·ªõc ph∆°i nhi·ªÖm",
        "Lo·∫°i x√©t nghi·ªám HIV",
        "Thi·∫øt b·ªã y t·∫ø"
      ],
      correctAnswer: 1,
      explanation: "PrEP (Pre-Exposure Prophylaxis) l√† thu·ªëc d·ª± ph√≤ng tr∆∞·ªõc ph∆°i nhi·ªÖm HIV, gi√∫p gi·∫£m nguy c∆° nhi·ªÖm HIV l√™n ƒë·∫øn 99%."
    },
    {
      id: 6,
      question: "Ng∆∞·ªùi nhi·ªÖm HIV c√≥ th·ªÉ s·ªëng b√¨nh th∆∞·ªùng kh√¥ng?",
      options: [
        "Kh√¥ng, s·∫Ω ch·∫øt trong v√†i th√°ng",
        "C√≥, n·∫øu tu√¢n th·ªß ƒëi·ªÅu tr·ªã ARV",
        "Ch·ªâ s·ªëng ƒë∆∞·ª£c 1-2 nƒÉm",
        "T√πy thu·ªôc v√†o tu·ªïi t√°c"
      ],
      correctAnswer: 1,
      explanation: "V·ªõi ƒëi·ªÅu tr·ªã ARV hi·ªán ƒë·∫°i, ng∆∞·ªùi nhi·ªÖm HIV c√≥ th·ªÉ s·ªëng b√¨nh th∆∞·ªùng nh∆∞ ng∆∞·ªùi kh√¥ng nhi·ªÖm, c√≥ tu·ªïi th·ªç g·∫ßn nh∆∞ b√¨nh th∆∞·ªùng."
    },
    {
      id: 7,
      question: "U=U c√≥ nghƒ©a l√† g√¨?",
      options: [
        "Undetectable = Untransmittable",
        "Unsafe = Unhealthy",
        "Untreated = Unwell",
        "Unknown = Uncertain"
      ],
      correctAnswer: 0,
      explanation: "U=U nghƒ©a l√† 'Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c = Kh√¥ng l√¢y truy·ªÅn'. Khi t·∫£i l∆∞·ª£ng virus kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c, ng∆∞·ªùi nhi·ªÖm HIV kh√¥ng th·ªÉ l√¢y truy·ªÅn virus qua ƒë∆∞·ªùng t√¨nh d·ª•c."
    },
    {
      id: 8,
      question: "Khi n√†o n√™n x√©t nghi·ªám HIV?",
      options: [
        "Ch·ªâ khi c√≥ tri·ªáu ch·ª©ng",
        "ƒê·ªãnh k·ª≥ 6 th√°ng/l·∫ßn",
        "Sau khi c√≥ h√†nh vi nguy c∆° ho·∫∑c ƒë·ªãnh k·ª≥",
        "Ch·ªâ m·ªôt l·∫ßn trong ƒë·ªùi"
      ],
      correctAnswer: 2,
      explanation: "N√™n x√©t nghi·ªám HIV sau khi c√≥ h√†nh vi nguy c∆° cao ho·∫∑c x√©t nghi·ªám ƒë·ªãnh k·ª≥. Ph√°t hi·ªán s·ªõm gi√∫p ƒëi·ªÅu tr·ªã hi·ªáu qu·∫£ h∆°n."
    },
    {
      id: 9,
      question: "HIV v√† AIDS c√≥ gi·ªëng nhau kh√¥ng?",
      options: [
        "Ho√†n to√†n gi·ªëng nhau",
        "HIV l√† virus, AIDS l√† h·ªôi ch·ª©ng",
        "AIDS xu·∫•t hi·ªán tr∆∞·ªõc HIV",
        "Kh√¥ng c√≥ m·ªëi li√™n h·ªá g√¨"
      ],
      correctAnswer: 1,
      explanation: "HIV l√† virus g√¢y b·ªánh, c√≤n AIDS l√† h·ªôi ch·ª©ng suy gi·∫£m mi·ªÖn d·ªãch m·∫Øc ph·∫£i do HIV g√¢y ra ·ªü giai ƒëo·∫°n cu·ªëi."
    },
    {
      id: 10,
      question: "ƒêi·ªÅu quan tr·ªçng nh·∫•t khi s·ªëng v·ªõi HIV l√† g√¨?",
      options: [
        "Gi·∫•u k√≠n b·ªánh t√¨nh",
        "Tu√¢n th·ªß ƒëi·ªÅu tr·ªã v√† s·ªëng t√≠ch c·ª±c",
        "Tr√°nh ti·∫øp x√∫c v·ªõi m·ªçi ng∆∞·ªùi",
        "Ch·ªâ t·∫≠p trung v√†o ƒëi·ªÅu tr·ªã"
      ],
      correctAnswer: 1,
      explanation: "ƒêi·ªÅu quan tr·ªçng nh·∫•t l√† tu√¢n th·ªß ƒëi·ªÅu tr·ªã ARV, duy tr√¨ l·ªëi s·ªëng t√≠ch c·ª±c v√† kh·ªèe m·∫°nh, c√πng v·ªõi s·ª± h·ªó tr·ª£ t·ª´ gia ƒë√¨nh v√† c·ªông ƒë·ªìng."
    }
  ];

  const handleStartQuiz = () => {
    setQuizStarted(true);
    setCurrentQuestion(0);
    setSelectedAnswers({});
    setShowResult(false);
  };

  const handleSelectAnswer = (answerIndex) => {
    setSelectedAnswers({
      ...selectedAnswers,
      [currentQuestion]: answerIndex
    });
  };

  const handleNextQuestion = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      calculateResult();
    }
  };

  const handlePreviousQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  const calculateResult = () => {
    setShowResult(true);
  };

  const getScore = () => {
    let correct = 0;
    questions.forEach((question, index) => {
      if (selectedAnswers[index] === question.correctAnswer) {
        correct++;
      }
    });
    return correct;
  };

  const getScoreLevel = (score) => {
    const percentage = (score / questions.length) * 100;
    if (percentage >= 80) return { level: "Xu·∫•t s·∫Øc", color: "text-green-600", emoji: "üèÜ" };
    if (percentage >= 60) return { level: "T·ªët", color: "text-blue-600", emoji: "üëç" };
    if (percentage >= 40) return { level: "Trung b√¨nh", color: "text-yellow-600", emoji: "üìö" };
    return { level: "C·∫ßn c·∫£i thi·ªán", color: "text-red-600", emoji: "üí™" };
  };

  const resetQuiz = () => {
    setQuizStarted(false);
    setCurrentQuestion(0);
    setSelectedAnswers({});
    setShowResult(false);
  };

  const renderWelcomeScreen = () => (
    <ScrollView className="flex-1 bg-gray-50">
      {/* Header */}
      <View className="bg-blue-600 px-4 py-6 pt-12">
        <View className="flex-row items-center mb-4">
          <TouchableOpacity 
            onPress={() => router.back()}
            className="mr-3 p-2 -ml-2"
          >
            <Ionicons name="arrow-back" size={24} color="white" />
          </TouchableOpacity>
          <View className="flex-1">
            <Text className="text-xl font-bold text-white">
              Quiz Ki·∫øn Th·ª©c HIV
            </Text>
          </View>
        </View>
        <Text className="text-white/90 text-sm">
          Ki·ªÉm tra hi·ªÉu bi·∫øt c·ªßa b·∫°n v·ªÅ HIV/AIDS
        </Text>
      </View>

      {/* Welcome Content */}
      <View className="px-6 py-8">
        <View className="bg-white rounded-3xl p-6 shadow-lg border border-blue-50 mb-6">
          <View className="items-center mb-6">
            <View className="bg-blue-100 p-4 rounded-full mb-4">
              <Text className="text-4xl">üß†</Text>
            </View>
            <Text className="text-2xl font-bold text-gray-800 text-center mb-2">
              Ch√†o m·ª´ng ƒë·∫øn v·ªõi Quiz HIV
            </Text>
            <Text className="text-gray-600 text-center leading-relaxed">
              Ki·ªÉm tra ki·∫øn th·ª©c c·ªßa b·∫°n v·ªÅ HIV/AIDS th√¥ng qua 10 c√¢u h·ªèi
            </Text>
          </View>

          <View className="space-y-4">
            <View className="flex-row items-center bg-blue-50 p-4 rounded-2xl">
              <View className="bg-blue-500 p-2 rounded-full mr-4">
                <Ionicons name="time" size={16} color="white" />
              </View>
              <View className="flex-1">
                <Text className="font-bold text-gray-800">Th·ªùi gian</Text>
                <Text className="text-gray-600 text-sm">Kh√¥ng gi·ªõi h·∫°n</Text>
              </View>
            </View>

            <View className="flex-row items-center bg-green-50 p-4 rounded-2xl">
              <View className="bg-green-500 p-2 rounded-full mr-4">
                <Ionicons name="help-circle" size={16} color="white" />
              </View>
              <View className="flex-1">
                <Text className="font-bold text-gray-800">S·ªë c√¢u h·ªèi</Text>
                <Text className="text-gray-600 text-sm">{questions.length} c√¢u h·ªèi tr·∫Øc nghi·ªám</Text>
              </View>
            </View>

            <View className="flex-row items-center bg-purple-50 p-4 rounded-2xl">
              <View className="bg-purple-500 p-2 rounded-full mr-4">
                <Ionicons name="school" size={16} color="white" />
              </View>
              <View className="flex-1">
                <Text className="font-bold text-gray-800">M·ª•c ƒë√≠ch</Text>
                <Text className="text-gray-600 text-sm">N√¢ng cao nh·∫≠n th·ª©c v·ªÅ HIV/AIDS</Text>
              </View>
            </View>
          </View>
        </View>

        <View className="bg-amber-50 border border-amber-200 rounded-3xl p-6 mb-6">
          <View className="flex-row items-center mb-4">
            <Ionicons name="information-circle" size={24} color="#F59E0B" />
            <Text className="text-amber-700 font-bold ml-2 text-lg">L∆∞u √Ω quan tr·ªçng</Text>
          </View>
          <View className="space-y-2">
            <Text className="text-amber-700 text-sm leading-relaxed">
              ‚Ä¢ ƒê·ªçc k·ªπ t·ª´ng c√¢u h·ªèi tr∆∞·ªõc khi ch·ªçn ƒë√°p √°n
            </Text>
            <Text className="text-amber-700 text-sm leading-relaxed">
              ‚Ä¢ Sau khi ho√†n th√†nh, b·∫°n s·∫Ω th·∫•y k·∫øt qu·∫£ v√† gi·∫£i th√≠ch chi ti·∫øt
            </Text>
            <Text className="text-amber-700 text-sm leading-relaxed">
              ‚Ä¢ Quiz n√†y ch·ªâ mang t√≠nh gi√°o d·ª•c, kh√¥ng thay th·∫ø t∆∞ v·∫•n y t·∫ø
            </Text>
          </View>
        </View>

        <TouchableOpacity 
          className="bg-blue-600 py-5 rounded-2xl shadow-lg"
          onPress={handleStartQuiz}
          style={{
            shadowColor: '#2563EB',
            shadowOffset: { width: 0, height: 4 },
            shadowOpacity: 0.3,
            shadowRadius: 8,
            elevation: 8
          }}
        >
          <View className="flex-row items-center justify-center">
            <Ionicons name="play" size={24} color="white" />
            <Text className="text-white text-lg font-bold ml-3">
              B·∫Øt ƒë·∫ßu Quiz
            </Text>
          </View>
        </TouchableOpacity>
      </View>
    </ScrollView>
  );

  const renderQuizScreen = () => {
    const question = questions[currentQuestion];
    const progress = ((currentQuestion + 1) / questions.length) * 100;

    return (
      <View className="flex-1 bg-gray-50">
        {/* Header */}
        <View className="bg-blue-600 px-4 py-6 pt-12">
          <View className="flex-row items-center justify-between mb-4">
            <TouchableOpacity 
              onPress={() => {
                Alert.alert(
                  "Tho√°t Quiz",
                  "B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t? Ti·∫øn ƒë·ªô s·∫Ω b·ªã m·∫•t.",
                  [
                    { text: "H·ªßy", style: "cancel" },
                    { text: "Tho√°t", onPress: resetQuiz }
                  ]
                );
              }}
              className="p-2 -ml-2"
            >
              <Ionicons name="close" size={24} color="white" />
            </TouchableOpacity>
            <Text className="text-white font-bold text-lg">
              C√¢u {currentQuestion + 1}/{questions.length}
            </Text>
            <View className="w-8" />
          </View>
          
          {/* Progress Bar */}
          <View className="bg-blue-500/30 h-2 rounded-full">
            <View 
              className="bg-white h-2 rounded-full transition-all duration-300"
              style={{ width: `${progress}%` }}
            />
          </View>
        </View>

        <ScrollView className="flex-1 px-6 py-6">
          {/* Question Card */}
          <View className="bg-white rounded-3xl p-6 shadow-lg border border-blue-50 mb-6">
            <View className="flex-row items-center mb-4">
              <View className="bg-blue-100 p-3 rounded-full mr-4">
                <Ionicons name="help-circle" size={24} color="#3B82F6" />
              </View>
              <Text className="text-sm text-blue-600 font-medium">
                C√¢u h·ªèi {currentQuestion + 1}
              </Text>
            </View>
            
            <Text className="text-xl font-bold text-gray-800 leading-relaxed">
              {question.question}
            </Text>
          </View>

          {/* Options */}
          <View className="space-y-4">
            {question.options.map((option, index) => (
              <TouchableOpacity
                key={index}
                className={`border-2 rounded-2xl p-4 ${
                  selectedAnswers[currentQuestion] === index
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-gray-200 bg-white'
                }`}
                onPress={() => handleSelectAnswer(index)}
              >
                <View className="flex-row items-center">
                  <View className={`w-6 h-6 rounded-full border-2 mr-4 items-center justify-center ${
                    selectedAnswers[currentQuestion] === index
                      ? 'border-blue-500 bg-blue-500'
                      : 'border-gray-300'
                  }`}>
                    {selectedAnswers[currentQuestion] === index && (
                      <Ionicons name="checkmark" size={16} color="white" />
                    )}
                  </View>
                  <Text className={`flex-1 text-base leading-relaxed ${
                    selectedAnswers[currentQuestion] === index
                      ? 'text-blue-700 font-medium'
                      : 'text-gray-700'
                  }`}>
                    {option}
                  </Text>
                </View>
              </TouchableOpacity>
            ))}
          </View>
        </ScrollView>

        {/* Navigation */}
        <View className="px-6 py-4 bg-white border-t border-gray-200">
          <View className="flex-row justify-between space-x-4">
            <TouchableOpacity 
              className={`flex-1 py-4 rounded-2xl border-2 ${
                currentQuestion === 0 
                  ? 'bg-gray-100 border-gray-200' 
                  : 'bg-white border-gray-300'
              }`}
              onPress={handlePreviousQuestion}
              disabled={currentQuestion === 0}
            >
              <View className="flex-row items-center justify-center">
                <Ionicons 
                  name="arrow-back" 
                  size={20} 
                  color={currentQuestion === 0 ? "#9CA3AF" : "#6B7280"} 
                />
                <Text className={`ml-2 font-bold ${
                  currentQuestion === 0 ? 'text-gray-400' : 'text-gray-700'
                }`}>
                  Tr∆∞·ªõc
                </Text>
              </View>
            </TouchableOpacity>

            <TouchableOpacity 
              className={`flex-1 py-4 rounded-2xl ${
                selectedAnswers[currentQuestion] !== undefined
                  ? 'bg-blue-600' 
                  : 'bg-gray-400'
              }`}
              onPress={handleNextQuestion}
              disabled={selectedAnswers[currentQuestion] === undefined}
            >
              <View className="flex-row items-center justify-center">
                <Text className="text-white font-bold mr-2">
                  {currentQuestion === questions.length - 1 ? 'Ho√†n th√†nh' : 'Ti·∫øp'}
                </Text>
                <Ionicons 
                  name={currentQuestion === questions.length - 1 ? "checkmark" : "arrow-forward"} 
                  size={20} 
                  color="white" 
                />
              </View>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    );
  };

  const renderResultScreen = () => {
    const score = getScore();
    const scoreLevel = getScoreLevel(score);
    const percentage = Math.round((score / questions.length) * 100);

    return (
      <ScrollView className="flex-1 bg-gray-50">
        {/* Header */}
        <View className="bg-blue-600 px-4 py-6 pt-12">
          <View className="flex-row items-center justify-between">
            <Text className="text-xl font-bold text-white">
              K·∫øt Qu·∫£ Quiz
            </Text>
            <TouchableOpacity 
              onPress={resetQuiz}
              className="p-2"
            >
              <Ionicons name="refresh" size={24} color="white" />
            </TouchableOpacity>
          </View>
          <Text className="text-white/90 text-sm mt-2">
            Xem k·∫øt qu·∫£ v√† gi·∫£i th√≠ch chi ti·∫øt
          </Text>
        </View>

        <View className="px-6 py-8">
          {/* Score Card */}
          <View className="bg-white rounded-3xl p-6 shadow-lg border border-blue-50 mb-6 items-center">
            <Text className="text-6xl mb-4">{scoreLevel.emoji}</Text>
            <Text className={`text-3xl font-bold mb-2 ${scoreLevel.color}`}>
              {score}/{questions.length}
            </Text>
            <Text className="text-xl font-bold text-gray-800 mb-2">
              {scoreLevel.level}
            </Text>
            <Text className="text-gray-600 text-center">
              B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng {percentage}% s·ªë c√¢u h·ªèi
            </Text>
          </View>

          {/* Detailed Results */}
          <View className="space-y-4">
            {questions.map((question, index) => {
              const userAnswer = selectedAnswers[index];
              const isCorrect = userAnswer === question.correctAnswer;
              
              return (
                <View key={index} className="bg-white rounded-2xl p-5 shadow-sm border border-gray-100">
                  <View className="flex-row items-center mb-3">
                    <View className={`p-2 rounded-full mr-3 ${
                      isCorrect ? 'bg-green-100' : 'bg-red-100'
                    }`}>
                      <Ionicons 
                        name={isCorrect ? "checkmark-circle" : "close-circle"} 
                        size={20} 
                        color={isCorrect ? "#10B981" : "#EF4444"} 
                      />
                    </View>
                    <Text className="font-bold text-gray-800 flex-1">
                      C√¢u {index + 1}
                    </Text>
                  </View>
                  
                  <Text className="text-gray-700 mb-3 leading-relaxed">
                    {question.question}
                  </Text>
                  
                  <View className="space-y-2">
                    <View className="bg-green-50 border border-green-200 rounded-lg p-3">
                      <Text className="text-green-700 font-medium text-sm">
                        ‚úì ƒê√°p √°n ƒë√∫ng: {question.options[question.correctAnswer]}
                      </Text>
                    </View>
                    
                    {!isCorrect && (
                      <View className="bg-red-50 border border-red-200 rounded-lg p-3">
                        <Text className="text-red-700 font-medium text-sm">
                          ‚úó B·∫°n ch·ªçn: {question.options[userAnswer]}
                        </Text>
                      </View>
                    )}
                    
                    <View className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                      <Text className="text-blue-700 text-sm leading-relaxed">
                        üí° {question.explanation}
                      </Text>
                    </View>
                  </View>
                </View>
              );
            })}
          </View>

          {/* Action Buttons */}
          <View className="mt-8 space-y-4">
            <TouchableOpacity 
              className="bg-blue-600 py-5 rounded-2xl shadow-lg"
              onPress={handleStartQuiz}
            >
              <View className="flex-row items-center justify-center">
                <Ionicons name="refresh" size={24} color="white" />
                <Text className="text-white text-lg font-bold ml-3">
                  L√†m l·∫°i Quiz
                </Text>
              </View>
            </TouchableOpacity>

            <TouchableOpacity 
              className="bg-white border-2 border-gray-200 py-5 rounded-2xl"
              onPress={() => router.back()}
            >
              <View className="flex-row items-center justify-center">
                <Ionicons name="arrow-back" size={24} color="#6B7280" />
                <Text className="text-gray-700 text-lg font-bold ml-3">
                  Quay l·∫°i
                </Text>
              </View>
            </TouchableOpacity>
          </View>
        </View>
      </ScrollView>
    );
  };

  if (showResult) {
    return renderResultScreen();
  }

  if (quizStarted) {
    return renderQuizScreen();
  }

  return renderWelcomeScreen();
};

export default HivQuiz;
